{"version":3,"sources":["components/Wrapper/index.js","components/Title/index.js","utils/API.js","components/EmployeeCard/index.js","components/Directory/index.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","props","className","children","Title","axios","get","EmployeeCard","alt","name","src","image","title","first","last","age","gender","city","state","email","cell","Results","results","search","employees","API","then","res","setState","result","data","catch","err","console","log","handleInputChange","event","target","value","this","map","employee","id","key","pictue","medium","location","dob","Component","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"6UAOeA,MAJf,SAAiBC,GACf,OAAO,yBAAKC,UAAU,WAAWD,EAAME,W,MCG1BC,MAJf,SAAeH,GACb,OAAO,wBAAIC,UAAU,SAASD,EAAME,W,yBCFvB,EACH,WACR,OAAOE,IAAMC,IAAI,kD,MC+BNC,MAhCf,SAAsBN,GACpB,OACE,yBAAKC,UAAU,QACb,yBAAKA,UAAU,iBACb,yBAAKM,IAAKP,EAAMQ,KAAMC,IAAKT,EAAMU,SAEnC,yBAAKT,UAAU,WACb,4BACE,4BACE,yCADF,IAC0BD,EAAMW,MAAOX,EAAMY,MAAOZ,EAAMa,MAE1D,4BACE,wCADF,IACyBb,EAAMc,KAE/B,4BACE,2CADF,IAC4Bd,EAAMe,QAElC,4BACE,6CADF,IAC8Bf,EAAMgB,KADpC,IAC2ChB,EAAMiB,OAEjD,4BACE,0CADF,IAC2BjB,EAAMkB,OAEjC,4BACE,0CADF,IAC2BlB,EAAMmB,UCgC5BC,E,4MAtDXH,MAAQ,CACJI,QAAS,GACTC,OAAQ,I,EAOZC,UAAY,WACRC,IACKC,MAAK,SAAAC,GACF,EAAKC,SAED,CAAEC,OAAQF,EAAIG,KAAKR,aAG1BS,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,O,EAGlCG,kBAAoB,SAAAC,GAChB,IAAM3B,EAAO2B,EAAMC,OAAO5B,KACpB6B,EAAQF,EAAMC,OAAOC,MAC3B,EAAKV,SAAL,eACKnB,EAAO6B,K,kEAlBZC,KAAKf,c,+BAwBL,OACI,6BACKe,KAAKrB,MAAMI,QAAQkB,KAAI,SAAAC,GAAQ,OAE5B,kBAAC,EAAD,CACIC,GAAID,EAASC,GAAGJ,MAChBK,IAAKF,EAASC,GAAGJ,MACjB1B,MAAO6B,EAAShC,KAAKG,MACrBC,MAAO4B,EAAShC,KAAKI,MACrBC,KAAM2B,EAAShC,KAAKK,KACpBH,MAAO8B,EAASG,OAAOC,OACvB7B,OAAQyB,EAASzB,OACjBG,MAAOsB,EAAStB,MAChBF,KAAMwB,EAASK,SAAS7B,KACxBC,MAAOuB,EAASK,SAAS5B,MACzBH,IAAK0B,EAASM,IAAIhC,IAClBK,KAAMqB,EAASrB,e,GA/CjB4B,aCkBPC,E,4MAfb/B,MAAQ,G,uDAKN,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,sBACE,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GAVQ8B,aCMEE,QACW,cAA7BC,OAAOL,SAASM,UAEe,UAA7BD,OAAOL,SAASM,UAEhBD,OAAOL,SAASM,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnC,MAAK,SAAAoC,GACJA,EAAaC,gBAEdhC,OAAM,SAAAiC,GACL/B,QAAQ+B,MAAMA,EAAMC,c","file":"static/js/main.d6ac4013.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Wrapper(props) {\r\n  return <div className=\"wrapper\">{props.children}</div>;\r\n}\r\n\r\nexport default Wrapper;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Title(props) {\r\n  return <h1 className=\"title\">{props.children}</h1>;\r\n}\r\n\r\nexport default Title;\r\n","import axios from \"axios\";\r\n\r\nexport default {\r\n  getUsers: function() {\r\n    return axios.get(\"https://randomuser.me/api/?results=200&nat=us\");\r\n  }\r\n};","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction EmployeeCard(props) {\r\n  return (\r\n    <div className=\"card\">\r\n      <div className=\"img-container\">\r\n        <img alt={props.name} src={props.image}/>\r\n      </div>\r\n      <div className=\"content\">\r\n        <ul>\r\n          <li>\r\n            <strong>Name:</strong> {props.title}{props.first}{props.last}\r\n          </li>\r\n          <li>\r\n            <strong>Age:</strong> {props.age}\r\n          </li>\r\n          <li>\r\n            <strong>Gender:</strong> {props.gender}\r\n          </li>\r\n          <li>\r\n            <strong>Location:</strong> {props.city},{props.state}\r\n          </li>\r\n          <li>\r\n            <strong>email:</strong> {props.email}\r\n          </li>\r\n          <li>\r\n            <strong>Phone:</strong> {props.cell}\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default EmployeeCard;\r\n","import React, { Component } from \"react\"\r\nimport API from \"../../utils/API\"\r\nimport EmployeeCard from \"../EmployeeCard\"\r\n\r\nclass Results extends Component {\r\n    state = {\r\n        results: [],\r\n        search: \"\"\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.employees()\r\n    };\r\n\r\n    employees = () => {\r\n        API.getUsers()\r\n            .then(res => {\r\n                this.setState(\r\n\r\n                    { result: res.data.results }\r\n                )\r\n            })\r\n            .catch(err => console.log(err));\r\n    };\r\n\r\n    handleInputChange = event => {\r\n        const name = event.target.name;\r\n        const value = event.target.value;\r\n        this.setState({\r\n            [name]: value\r\n        });\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.state.results.map(employee => (\r\n\r\n                    <EmployeeCard\r\n                        id={employee.id.value}\r\n                        key={employee.id.value}\r\n                        title={employee.name.title} \r\n                        first={employee.name.first}\r\n                        last={employee.name.last}\r\n                        image={employee.pictue.medium}\r\n                        gender={employee.gender}\r\n                        email={employee.email}\r\n                        city={employee.location.city}\r\n                        state={employee.location.state}\r\n                        age={employee.dob.age}\r\n                        cell={employee.cell}\r\n                    />\r\n                ))}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Results;","import React, { Component } from 'react';\nimport Wrapper from \"./components/Wrapper\"\nimport Title from \"./components/Title\"\nimport Results from './components/Directory';\nimport EmployeeCard from './components/EmployeeCard';\n\nclass App extends Component {\n  state = {\n    // employee\n  }\n\n  render() {\n    return (\n      <Wrapper>\n        <Title>Employee List</Title>\n          <Results />\n          <EmployeeCard/>\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}